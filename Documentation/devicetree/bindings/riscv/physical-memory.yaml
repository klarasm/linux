# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/riscv/physical-memory.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: RISC-V Physical Memory Regions

maintainers:
  - Samuel Holland <samuel.holland@sifive.com>

description:
  The RISC-V Privileged Architecture defines a number of Physical Memory
  Attributes (PMAs) which apply to a given region of memory. These include the
  types of accesses (read, write, execute, LR/SC, and/or AMO) allowed within
  a region, the supported access widths and alignments, the cacheability and
  coherence of the region, and whether or not accesses to the region may have
  side effects.

  Some RISC-V platforms provide multiple physical address mappings for main
  memory or certain peripherals. Each alias of a region generally has different
  PMAs (e.g. cacheable vs non-cacheable), which allows software to dynamically
  select the PMAs for an access by referencing the corresponding alias.

  The RISC-V Supervisor Domains specification defines a platform-specific
  Physical Address Width (PAW), which describes the largest physical address
  supported by a platform. Any access to an address >= 2^PAW is guaranteed to
  raise an access fault, and therefore metadata (e.g. Memory Protection Tables)
  need not be maintained for those addresses.

  On DT-based RISC-V platforms, all of this information is provided by the
  riscv,physical-memory-regions property of the root node.

properties:
  $nodename:
    const: '/'

  riscv,physical-memory-regions:
    $ref: /schemas/types.yaml#/definitions/uint32-matrix
    description:
      A table of physical memory regions. The first entry in the table must
      cover the entire range of physical addresses supported by the platform
      (i.e. 0 to 2^PAW-1) and provides the default PMAs for all addresses not
      covered by another table entry. Remaining table entries provide PMAs for
      more specific physical memory regions, which must be contained within the
      range of entry 0, but which must not overlap with each other.
    minItems: 1
    maxItems: 256
    items:
      minItems: 4
      maxItems: 6
      additionalItems: true
      items:
        - description: CPU physical address (#address-cells)
        - description: >
            Size (#size-cells). For entry 0, if the size is zero, the size is
            assumed to be 2^(32 * #size-cells).
        - description: >
            Flags describing the most restrictive PMAs for any address within
            the region.

            The least significant byte indicates the types of accesses allowed
            for this region. Note that a memory region may support a type of
            access (e.g. AMOs) even if the CPU does not.

            The next byte describes the cacheability, coherence, idempotency,
            and ordering PMAs for this region. It also includes a flag to
            indicate that accesses to a region are unsafe and must be
            prohibited by software (for example using PMPs or Smmpt).

            The third byte is reserved for future PMAs.

            The most significant byte is the index of the lowest-numbered entry
            which this entry is an alias of, if any. Aliases need not be the
            same size, for example if a smaller memory region repeats within a
            larger alias.
        - description: Reserved for describing future PMAs

additionalProperties: true

examples:
  - |
    #include <dt-bindings/riscv/physical-memory.h>

    / {
      compatible = "starfive,jh7100";
      #address-cells = <2>;
      #size-cells = <2>;
      riscv,physical-memory-regions =
          <0x00 0x00000000 0x40 0x00000000 (PMA_RW | PMA_IO) 0x0>,
          <0x00 0x18000000 0x00 0x00020000 (PMA_RWX | PMA_NONCACHEABLE_MEMORY) 0x0>,
          <0x00 0x18080000 0x00 0x00020000 (PMA_RWX | PMA_NONCACHEABLE_MEMORY) 0x0>,
          <0x00 0x41000000 0x00 0x1f000000 (PMA_RWX | PMA_NONCACHEABLE_MEMORY) 0x0>,
          <0x00 0x61000000 0x00 0x1f000000 (PMA_RWXA | PMA_NONCOHERENT_MEMORY | PMR_ALIAS(3)) 0x0>,
          <0x00 0x80000000 0x08 0x00000000 (PMA_RWXA | PMA_NONCOHERENT_MEMORY) 0x0>,
          <0x10 0x00000000 0x08 0x00000000 (PMA_RWX | PMA_NONCACHEABLE_MEMORY | PMR_ALIAS(5)) 0x0>,
          <0x20 0x00000000 0x10 0x00000000 (PMA_RWX | PMA_NONCACHEABLE_MEMORY) 0x0>,
          <0x30 0x00000000 0x10 0x00000000 (PMA_RWXA | PMA_NONCOHERENT_MEMORY | PMR_ALIAS(7)) 0x0>;
    };

...
